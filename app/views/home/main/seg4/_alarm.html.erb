<script type="text/template" id="userAlarmTemplate">
  <div id="alarm_list" class="alarm_list" ontouchstart="removeIOSRubberEffect($(this));">
    {{ if (alarms && alarms.length > 0) { }}
      {{ for (var i=0; i < alarms.length; i++) { }}
        {{ var alarm = alarms[i] }}
        {{= alarmCommentTemplate({ alarm: alarm }) }}
      {{ } }}
    {{ } else { }}
      <div class="no_result"><span class="align_middle">새로운 알림피드가 없습니다</span></div>
    {{ } }}
  </div>
  {{ if (alarm_count !== null) { }}
    <div class="alarm_feed_title" ontouchmove="return false;">
      <i class="fa fa-caret-right"></i> 알림피드 <span id="alarm_feed_count" class="alarm_feed_count">{{= alarm_count == 0 ? '-' : alarm_count }}</span>
      <div id="alarm_read_all" class="alarm_read_all {{= alarm_count == 0 ? '' : 'on' }}">
        <span>다른 이들과 소통해보세요!</span><br>
        <span class="alarm_read_all_btn" onclick="alarm_read_all();"><i class="fa fa-check"></i> 모두 읽음으로 표시</span>
      </div>
    </div>
  {{ } }}
</script>

<script type="text/template" id="alarmCommentTemplate">
  <a href="/asks/{{= alarm.ask_id }}" onclick="alarm_read($(this)); return false;" ask-id="{{= alarm.ask_id }}" class="clearfix alarm_item {{= alarm.is_read ? '' : 'new_alarm' }} alarm_ask_{{= alarm.ask_id }}">
    <div class="clearfix">
      <div class="alarm_msg" alarm-time="{{= get_past_time(alarm.updated_at) }}">{{= fetch_alarm_msg(alarm) }}</div>
      <div class="alarm_imgs">
        <img src="{{= get_image_url(alarm.ask.left_ask_deal, 'ask_deals', 'normal') }}" class="alarm_img_thumbnail" onerror="imgError(this);">
        <img src="{{= get_image_url(alarm.ask.right_ask_deal, 'ask_deals', 'normal') }}" class="alarm_img_thumbnail" onerror="imgError(this);">
      </div>
    </div>
    {{ if (alarm.original_comment) { }}
      <div class="clearfix alarm_comment">
        <img class="alarm_user_pic" src="{{= get_avatar(alarm.original_comment.user) }}" alt="">
        <span class="alarm_comment_content">{{= alarm.original_comment.content }}</span>
      </div>
    {{ } }}
    {{ if (alarm.comment) { }}
      <div class="clearfix alarm_comment">
        <img class="alarm_user_pic" src="{{= get_avatar(alarm.comment.user) }}" alt="">
        <span class="alarm_comment_content">{{= alarm.comment.content }}</span>
      </div>
    {{ } }}
  </a>
</script>

<script>
  var userAlarmTemplate = _.template($('#userAlarmTemplate').html());
  var alarmCommentTemplate = _.template($('#alarmCommentTemplate').html());

  function user_alarms_on() {
    $.ajax({
		    url: '/users/get_user_alarms.json',
        dataType: 'json',
        type: 'GET',
        error: function() {
          notify('<i class="fa fa-exclamation-triangle"></i> 네트워크 오류');
        },
		    success: function(data) {
          $('#user_alarm').html(userAlarmTemplate({ alarms: data.alarms, alarm_count: data.alarm_count }));
        }
    });
  }

  function fetch_alarm_msg(alarm) {
    var alarm_msg = '';
    if (alarm.alarm_type.match(/^vote_/)) {
      alarm_msg = '<i class="fa fa-check-circle-o"></i> 회원님의 질문에 <b>' + alarm.alarm_type.replace('vote_', '') + '명</b>이 투표했습니다. 중간점검 해보세요!';
    } else if (alarm.alarm_type.match(/^like_ask_/)) {
      var ask_like_count = alarm.alarm_type.replace('like_ask_', '');
      alarm_msg = '<i class="fa fa-heart-o"></i> 회원님의 질문에 <b>' + alarm.send_user.string_id + '님</b>';
      if (ask_like_count > 1) alarm_msg += ' <b>외 ' + (ask_like_count - 1) + '명</b>';
      alarm_msg += '이 공감합니다';
    } else if (alarm.alarm_type.match(/^comment_/)) {
      var comment_count = alarm.alarm_type.replace('comment_', '');
      alarm_msg = '<i class="fa fa-send-o"></i> 회원님의 질문에 <b>' + alarm.send_user.string_id + '님</b>';
      if (comment_count > 1) alarm_msg += ' <b>외 ' + (comment_count - 1) + '명</b>';
      alarm_msg += '이 의견을 남겼습니다';
    } else if (alarm.alarm_type.match(/^like_comment_/)) {
      var comment_like_count = alarm.alarm_type.replace('like_comment_', '');
      alarm_msg = '<i class="fa fa-heart-o"></i> 회원님의 의견을 <b>' + alarm.send_user.string_id + '님</b>';
      if (comment_like_count > 1) alarm_msg += ' <b>외 ' + (comment_like_count - 1) + '명</b>';
      alarm_msg += '이 좋아합니다';
    } else if (alarm.alarm_type.match(/^reply_comment_/)) {
      var reply_comment_count = alarm.alarm_type.replace('reply_comment_', '');
      alarm_msg = '<i class="fa fa-comments-o"></i> 회원님의 의견에 <b>' + alarm.send_user.string_id + '님</b>';
      if (reply_comment_count > 1) alarm_msg += ' <b>외 ' + (reply_comment_count - 1) + '명</b>';
      alarm_msg += '이 댓글을 남겼습니다';
    } else if (alarm.alarm_type.match(/^sub_comment_/)) {
      var sub_comment_count = alarm.alarm_type.replace('sub_comment_', '');
      alarm_msg = '<i class="fa fa-comment-o"></i> 회원님이 의견을 남긴 <b>' + alarm.ask_owner_user.string_id + '님</b>의 질문에 <b>' + alarm.send_user.string_id + '님</b>';
      if (sub_comment_count > 1) alarm_msg += ' <b>외 ' + (sub_comment_count - 1) + '명</b>';
      alarm_msg += '도 의견을 남겼습니다';
    } else if (alarm.alarm_type.match(/^reply_sub_comment_/)) {
      var reply_sub_comment_count = alarm.alarm_type.replace('reply_sub_comment_', '');
      alarm_msg = '<i class="fa fa-comments-o"></i> 회원님이 댓글을 남긴 <b>' + alarm.comment_owner_user.string_id + '님</b>의 의견에 <b>' + alarm.send_user.string_id + '님</b>';
      if (reply_sub_comment_count > 1) alarm_msg += ' <b>외 ' + (reply_sub_comment_count - 1) + '명</b>';
      alarm_msg += '도 댓글을 남겼습니다';
    } else if (alarm.alarm_type.match(/^liked_ask_comment_/)) {
      var liked_ask_comment_count = alarm.alarm_type.replace('liked_ask_comment_', '');
      alarm_msg = '<i class="fa fa-comments-o"></i> 회원님이 공감한 <b>' + alarm.ask_owner_user.string_id + '</b>님의 질문에 <b>' + alarm.send_user.string_id + '님</b>';
      if (liked_ask_comment_count > 1) alarm_msg += ' <b>외 ' + (liked_ask_comment_count - 1) + '명</b>';
      alarm_msg += '이 의견을 남겼습니다';
    }
    return alarm_msg;
  }

  function alarm_read(target) {
    var ask_id = Number(target.attr('ask-id'));
    var alarm_count = parseInt($('#alarm_feed_count').html());
    var all_alarm_items = $('#alarm_list').find('.alarm_ask_' + ask_id);
    var alarm_count_decrease = all_alarm_items.length;
    if (target.hasClass('new_alarm')) {
      if (alarm_count > alarm_count_decrease) {
        $('#alarm_feed_count').html(alarm_count - alarm_count_decrease);
      } else {
        $('#my_badge').removeClass('on');
        $('#alarm_read_all').removeClass('on');
        $('#alarm_feed_count').html('-');
      }
      all_alarm_items.removeClass('new_alarm');
    }
    ga('send', 'event', '마이탭', '알림 개별 확인', current_user.string_id, 1);
    go_url('ask', ask_id);
  }

  function alarm_read_all() {
    $.ajax({
            url: '/alarms.json',
            dataType: 'json',
            type: 'GET',
            error: function() {
              notify('<i class="fa fa-exclamation-triangle"></i> 네트워크 오류');
            },
    		    success: function(data) {
              if (data.status == 'success') {
                $('#alarm_list').find('.alarm_item').removeClass('new_alarm');
                $('#my_badge').removeClass('on');
                $('#alarm_read_all').removeClass('on');
                $('#alarm_feed_count').html('-');
              }
            }
    });
    ga('send', 'event', '마이탭', '알림 전체 확인', current_user.string_id, 1);
  }
</script>
