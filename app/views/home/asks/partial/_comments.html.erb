<script type="text/template" id="commentListTemplate">
  <div class="comment ask_{{= ask.id }}">
    <div class="comment_title">
      <div class="comment_title_left"><img class="comment_title_img left" src="{{= get_image_url(ask.left_ask_deal, 'ask_deals', 'normal') }}" onerror="imgError(this);">A 제품</div>
      <div class="comment_title_right"><img class="comment_title_img right" src="{{= get_image_url(ask.right_ask_deal, 'ask_deals', 'normal') }}" onerror="imgError(this);">B 제품</div>
    </div>
    {{ var comment_count = ask.left_ask_deal.comment_count + ask.right_ask_deal.comment_count }}
    <ul class="comment_list" ask-id="{{= ask.id }}" comment-count="{{= comment_count }}" page="1" date="{{= new Date() }}" loading="true">
      <div class="loading_icon" comment-count="{{= comment_count }}" remain-count="{{= comment_count }}"><i class="fa fa-spinner fa-spin"></i></div>
    </ul>
  </div>
</script>

<script type="text/template" id="commentsTemplate">
  {{ for (var i=0; i < comments.length; i++) { }}
    {{ var original_comment = comments[i] }}
    {{= commentTemplate({ ask: ask, comment: original_comment }) }}
    {{ for (var j=0; j < original_comment.reply_comments.length; j++) { }}
      {{ var reply_comment = original_comment.reply_comments[j] }}
      {{= commentTemplate({ ask: ask, comment: reply_comment }) }}
    {{ } }}
  {{ } }}
</script>

<script type="text/template" id="commentTemplate">
  {{ var direction = ask.left_ask_deal_id == comment.ask_deal_id ? 'left' : 'right' }}
  {{ var gender = comment.user.gender ? 'male' : 'female' }}
  {{ var reply = comment.comment_id === null ? 'original' : 'reply' }}
  {{ var is_liked_comment = false }}
  {{ if (current_user) { }}
    {{ is_liked_comment = $.grep(comment.comment_likes, function(obj) { return obj.user_id === current_user.id}).length === 0 ? false : true }}
  {{ } }}
  <li class="comment_box {{= comment.id }} {{= direction }} {{= reply }} {{= comment.is_deleted ? 'deleted' : '' }} {{= comment.user.id == 1 ? 'vaskit' : '' }} clearfix animated bounceIn" onclick="open_comment_menu($(this));" comment-id="{{= comment.id }}" original-comment-id="{{= reply == 'reply' ? comment.comment_id : comment.id }}" ask-user-id="{{= ask.user_id }}" comment-user-id="{{= comment.user_id }}" is-deleted="{{= comment.is_deleted ? 'true' : '' }}">
    {{ if (reply == "reply") { }}
      <i class="fa fa-reply comment_reply_icon"></i>
    {{ } }}
    <img class="comment_user_pic" src="{{= get_avatar(comment.user) }}">
    <div class="comment_user">
      {{ if (comment.user.id == 1) { }}
        <span class="comment_user_id label vaskit">VASKIT</span>
      {{ } else if (current_user && comment.user.id == current_user.id) { }}
        <span class="comment_user_profile label me">ME</span>
        <span class="comment_user_id">{{= comment.user.string_id }}</span>
      {{ } else if (comment.user.id == ask.user_id) { }}
        <span class="comment_user_profile label asker">ASKER</span>
        <span class="comment_user_id">{{= comment.user.string_id }}</span>
      {{ } else { }}
        <span class="comment_user_profile {{= gender }}">{{= get_user_ages(comment.user.birthday) }}</span>
        <span class="comment_user_id">{{= comment.user.string_id }}</span>
      {{ } }}
      {{ if (current_user && comment.user_id == current_user.id) { }}
        {{ if (comment.like_count > 0) { }}
          <div class="comment_menu_btn">
            <span class="comment_like_count">좋아요 {{= numberWithCommas(comment.like_count) }} 개</span>
          </div>
        {{ } }}
      {{ } else { }}
        <div class="comment_menu_btn" onclick="window.event.cancelBubble = true; like_comment({{= comment.id }});">
          <span class="comment_like_count">{{= comment.like_count == 0 ? '' : numberWithCommas(comment.like_count) }}</span>
          <i class="fa {{= is_liked_comment ? 'fa-heart' : 'fa-heart-o' }} comment_like_icon"></i>
        </div>
      {{ } }}
    </div>
    <div class="comment_bubble" date="{{= get_past_time(comment.updated_at) }}">
      <div class="comment_content {{= current_user && current_user.id == ask.user_id && ask.be_completed && ask.updated_at < comment.created_at ? 'after_completed' : '' }}">
        {{ if (comment.is_deleted) { }}
          삭제된 댓글입니다
        {{ } else { }}
          {{ if (comment.image_file_name !== null) { }}
            <a class="link_img" onclick="return false;">
              <img src="{{= get_image_url(comment, 'comments', 'original') }}" alt="" onerror="imgError(this);">
            </a>
          {{ } }}
          {{= taggingKeywords(comment.content) }}
        {{ } }}
      </div>
    </div>
    <div class="comment_like_span">
      {{ if (comment.comment_likes && comment.comment_likes.length > 0) { }}
        {{= commentLikeTemplate({ recent_user: comment.comment_likes[comment.comment_likes.length-1].user, comment_like_count: comment.comment_likes.length }) }}
      {{ } }}
    </div>
  </li>
</script>

<script type="text/template" id="commentLikeTemplate">
  {{ if (recent_user !== null) { }}
    {{ var string_id }}
    {{ if (current_user && current_user.id === recent_user.id) { }}
      {{ string_id = '회원' }}
    {{ } else { }}
      {{ string_id = recent_user.string_id }}
    {{ } }}
    <div class="animated fadeInUp">
      {{ if (comment_like_count == 1) { }}
        <i class="fa fa-heart animated tada"></i> <span>{{= string_id }}님</span>이 이 댓글을 좋아합니다
      {{ } else { }}
        <i class="fa fa-heart animated tada"></i> <span>{{= string_id }}님 외 {{= comment_like_count - 1 }}명</span>이 이 댓글을 좋아합니다
      {{ } }}
    </div>
  {{ } }}
</script>

<script>
  var commentListTemplate = _.template($('#commentListTemplate').html());
  var commentsTemplate = _.template($('#commentsTemplate').html());
  var commentTemplate = _.template($('#commentTemplate').html());
  var commentLikeTemplate = _.template($('#commentLikeTemplate').html());

  function load_ask_comments(current_wrapper) {
    var current_ask_container = current_wrapper.find('.container.main');
    var current_comment_list = current_ask_container.find('.comment_list');
    var loading_icon = current_comment_list.find('.loading_icon');
    var ask_id = Number(current_comment_list.attr('ask-id'));
    var page = Number(current_comment_list.attr('page'));
    var date = current_comment_list.attr('date');
    $.ajax({
              url: '/comments.json',
              dataType: 'json',
              type: 'GET',
              data: { ask_id: ask_id, page: page, date: date },
              error: function() {
                notify('<i class="fa fa-exclamation-triangle"></i> 네트워크 오류');
              },
              success: function(data) {
                var current_loaded_comment_count = Number(loading_icon.attr('remain-count'));
                var loaded_comment_count = data.comments.length;
                loading_icon.attr('remain-count', current_loaded_comment_count - loaded_comment_count);
                loading_icon.before(commentsTemplate({ ask: data.ask, comments: data.comments }));
                if (data.is_more_load) {
                  current_ask_container.on('scroll', endless_loading_ask_comments);
                  current_comment_list.attr('page', page += 1).attr('loading', true);
                } else {
                  loading_icon.attr('load-complete', true);
                }
              },
              beforeSend: function() {
                current_ask_container.off('scroll');
                current_comment_list.removeAttr('loading');
              }
    });

    function endless_loading_ask_comments() {
      if (Boolean(current_comment_list.attr('loading')) && nearBottomOfContainer(current_ask_container)) {
        load_ask_comments(current_wrapper);
      }
    }
  }

  function open_comment_menu(target) {
    window.event.cancelBubble = true;
    var options;
    var is_deleted = Boolean(target.attr('is-deleted'));

    if (visitor_check()) {
      ga('send', 'event', '랜딩페이지', '랜딩페이지 진입', '비회원 댓글 메뉴 시도', 1);
    } else {
      if (is_deleted) {
        notify('삭제된 댓글입니다');
      } else {
        var comment_id = target.attr('comment-id');
        var original_comment_id = target.attr('original-comment-id');
        var ask_user_id = target.attr('ask-user-id');
        var comment_user_id = target.attr('comment-user-id');
        var comment_user_string_id = target.find('.comment_user_id').text();
        var comment_content = target.find('.comment_content').text();
        var already_like = target.find('.comment_like_icon').hasClass('fa-heart');
        if (comment_user_id == current_user.id) {
          options = {
                      description: '<b>' + comment_user_string_id + '님의 댓글</b><br>' + comment_content,
                      menus: [
                        {
                          name: '답글 달기',
                          func: 'history.back(); reply_comment(' + original_comment_id + ');'
                        },
                        {
                          name: '댓글 수정',
                          func: 'history.back(); edit_comment(' + comment_id + ');'
                        },
                        {
                          name: '댓글 삭제',
                          func: 'history.back(); delete_comment(' + comment_id + ');'
                        }
                      ]
                    };
        } else if (ask_user_id == current_user.id) {
          options = {
                      description: '<b>' + comment_user_string_id + '님의 댓글</b><br>' + comment_content,
                      menus: [
                        {
                          name: '채택하기',
                          class: 'confirmation',
                          func: "history.back(); notify('준비중입니다');"
                        },
                        {
                          name: already_like ? '좋아요 취소' : '좋아요',
                          func: 'history.back(); like_comment(' + comment_id + ');'
                        },
                        {
                          name: '답글 달기',
                          func: 'history.back(); reply_comment(' + original_comment_id + ');'
                        },
                        {
                          name: '신고하기',
                          func: "history.back(); report_content('comment', " + comment_id + ');'
                        }
                      ]
                    };
        } else {
          options = {
                      description: '<b>' + comment_user_string_id + '님의 댓글</b><br>' + comment_content,
                      menus: [
                        {
                          name: already_like ? '좋아요 취소' : '좋아요',
                          func: 'history.back(); like_comment(' + comment_id + ');'
                        },
                        {
                          name: '답글 달기',
                          func: 'history.back(); reply_comment(' + original_comment_id + ');'
                        },
                        {
                          name: '신고하기',
                          func: "history.back(); report_content('comment', " + comment_id + ');'
                        }
                      ]
                    };
        }
        go_url('menu', options);
      }
    }
  }

  function like_comment(comment_id) {
    if (visitor_check()) {
      ga('send', 'event', '랜딩페이지', '랜딩페이지 진입', '비회원 댓글 메뉴 시도', 1);
    } else {
      var all_comment_boxes = $('#main_view').find('.comment_box.' + comment_id);
      var all_comment_like_icons = all_comment_boxes.find('.comment_like_icon');
      var all_comment_like_counts = all_comment_boxes.find('.comment_like_count');
      var all_comment_like_spans = all_comment_boxes.find('.comment_like_span');

      $.ajax({
  		        url: '/comments/' + comment_id + '/like.json',
  		        type: 'POST',
  		        dataType: 'json',
  		        error: function() {
  		          notify('<i class="fa fa-exclamation-triangle"></i> 네트워크 오류');
  		        },
  		        success: function(data) {
  		        	if (data.already_like) {
                  all_comment_like_icons.removeClass('fa-heart').addClass('fa-heart-o').animateCss('jello');
  		        	} else {
                  all_comment_like_icons.removeClass('fa-heart-o').addClass('fa-heart').animateCss('flip');
  		        	}
                if (data.comment_like_count === 0) {
                  all_comment_like_counts.html('');
                  all_comment_like_spans.animateCssEmpty('fadeOutDown');
                } else {
                  all_comment_like_counts.html(data.comment_like_count);
                  all_comment_like_spans.html(commentLikeTemplate({ recent_user: data.recent_user, comment_like_count: data.comment_like_count }));
                }
  		        }
  			});
    }
  }

  function delete_comment(comment_id) {
    var options = {
                description: '정말로 삭제하시겠어요?',
                menus: [
                  {
                    name: '댓글 삭제',
                    func: 'delete_comment_confirmed(' + comment_id + ');',
                    class: 'confirmation'
                  }
                ]
              };
    setTimeout(function() {
      go_url('menu', options);
    }, 50);
  }

  function delete_comment_confirmed(comment_id) {
    var all_comment_boxes = $('#main_view').find('.comment_box.' + comment_id);
    var current_wrapper = $('#main_view').find('.seg.on').find('.wrapper').last();
    var current_ask_container = current_wrapper.find('.container.main');
    var ask_box = current_ask_container.find('.ask');
    var ask_id = Number(ask_box.attr('ask-id'));
    var all_ask_divs = $('#main_view').find('.ask.ask_' + ask_id);
    var all_ask_comment_count_spans = all_ask_divs.find('.ask_comment_count');
    var all_ask_comment_divs = $('#main_view').find('.comment.ask_' + ask_id);
    var all_ask_comment_lists = all_ask_comment_divs.find('.comment_list');
    var ask_comment_count = parseInt(all_ask_comment_count_spans.last().html());
    $.ajax({
            url: '/comments/' + comment_id + '.json',
            dataType: 'json',
            type: 'DELETE',
            error: function() {
              notify('<i class="fa fa-exclamation-triangle"></i> 네트워크 오류');
            },
            success: function(data) {
              if (data.status == 'not_authorized') {
                notify('권한이 없습니다');
              } else {
                all_comment_boxes.addClass('deleted').attr('is-deleted', true);
                all_comment_boxes.find('.comment_content').html('댓글이 삭제되었습니다');
                ask_comment_count -= 1;
                all_ask_comment_count_spans.html(ask_comment_count);
                all_ask_comment_lists.attr('comment-count', ask_comment_count);
              }
            },
            beforeSend: function() {
              history.back();
		        }
    });
  }
</script>
